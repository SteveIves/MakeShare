;=============================================================================
;
; Program:      MakeShare
;
; Description:  A utility program that analyses the content of an OpenVMS
;               object library and creates a DCL command procedure which can
;               be used to link a shared image from the library.
;
; Author:       Steve Ives, Synergex Professional Services Group
;
; Revision:     1.0     29th November 2011
;               1.1     24th April 2025
;
;=============================================================================
;
;Copyright (c) 2025, Synergex International, Inc.
;All rights reserved.
;
;Redistribution and use in source and binary forms, with or without
;modification, are permitted provided that the following conditions are met:
;
;* Redistributions of source code must retain the above copyright notice, this
;  list of conditions and the following disclaimer.
;
;* Redistributions in binary form must reproduce the above copyright notice,
;  this list of conditions and the following disclaimer in the documentation
;  and/or other materials provided with the distribution.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
;FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
;SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
;CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
;OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;=============================================================================
;
; To use this utility:
;
; 1. Build it
;
;    $ DIB/OPT MAKESHARE
;    $ LINK MAKESHARE,SYS$SHARE:SYNRTL/OPT
;
; 2. Assign a global symbol:
;
;    $ MAKESHARE:==$<disk>:[<directory>]MAKESHARE.EXE
;
; 3. Use it, to get started view the usage information, like this:
;
;    $ MAKESHARE -H
;
;=============================================================================

import System.Collections

main makeshare

    record
        pipe,           i4              ;Pipe channel for DCL command
        comfile,        i4              ;Output command file channel
        optfile,        i4              ;Linker options file
        ix,             i4              ;Generic loop counter
        spare_data,     i4              ;Number of spare data slots in symbol vector
        spare_routines, i4              ;Number of spare procedure slots in symbol vector
        mapFile,        boolean         ;Should the link generate a map file?
        linksql,        boolean         ;Should the image link against SSQLRTL?
        linktk,         boolean         ;Should the image link against UI Toolkit?
        quiet,          boolean         ;Quiet mode is active
        debugSupport,   boolean         ;Add debugging support in the symbol vector
        optionsFile,    boolean         ;Generate a linker options file instead of inline options.
        firstRecord,    boolean         ;Are we processing the first record?
        buff,           a128            ;Input buffer
        ClBuffer,       [10]a80         ;Command line parameters buffer
        ClCount,        d4              ;Number of command line parameters in buffer
        libspec,        string          ;Object library name (from command line)
        libfullspec,    string          ;Object library name (from command line)
        libname,        string          ;Base name of object library
        exelocation,    string          ;Location for shared image (from command line)
        exesuffix,      string          ;Suffix for shared image name (from command line)
        imagespec,      string          ;Full spec for shared image
        datasections,   @ArrayList      ;Collection of data sections for the symbol vector
        routines,       @ArrayList      ;Collection of procedures for the symbol vector
    endrecord

proc

    xcall flags(7004020,1)

    ;Make sure we're on OpenVMS, and not on VAX
    begin
        data system,  i4
        data machine, i4
        xcall envrn(system,machine)
        if ((system!=6)||(machine==201))
        begin
            Console.WriteLine("This utility can only be used on OpenVMS Alpha or IA64 systems.")
            stop
        end
    end

    ;Are we being asked for help?
    if (CommandLine("H ")||CommandLine("? "))
    begin
        call usage
        stop
    end

    ;Get the object library spec from the command line (-l libspec)
    if (CommandLine("L ",1,ClBuffer,ClCount)) then
    begin
        if (ClCount) then
            libspec = %atrim(ClBuffer[1])
        else
        begin
            ;No library specified after -l
            call usage
            stop
        end
    end
    else
    begin
        ;No -l option specified
        call usage
        stop
    end

    ;Do we have a location for the shared image executable (-e option)
    if (CommandLine("E ",1,ClBuffer,ClCount)) then
    begin
        if (ClCount) then
            exelocation = %atrim(ClBuffer[1])
        else
        begin
            ;No location specified after -e
            Console.WriteLine("Specify executable location after the -e option!")
            stop
        end
    end
    else
    begin
        ;No -e option, shared image will be in current directory
        exelocation=""
    end

    ;Do we have a suffix for the shared image executable (-s option)
    if (CommandLine("S ",1,ClBuffer,ClCount)) then
    begin
        if (ClCount) then
            exesuffix = %atrim(ClBuffer[1])
        else
        begin
            ;No suffix specified after -s
            Console.WriteLine("Specify executable suffix after the -s option!")
            stop
        end
    end
    else
    begin
        ;No -s option, no shared image suffix will be used
        exesuffix = ""
    end

    ;Are we being asked for spare space for data in the symbol vector  (-sd option)
    if (CommandLine("SD ",1,ClBuffer,ClCount)) then
    begin
        if (ClCount) then
            spare_data = %integer(%atrim(ClBuffer[1]))
        else
        begin
            ;No number specified after -sd
            Console.WriteLine("Specify a number after the -sd option!")
            stop
        end
    end
    else
    begin
        ;No -sd option, no spare data slots in symbol vector
        spare_data = 0
    end

    ;Are we being asked for spare space for procedures in the symbol vector  (-sp option)
    if (CommandLine("SP ",1,ClBuffer,ClCount)) then
    begin
        if (ClCount) then
            spare_routines = %integer(%atrim(ClBuffer[1]))
        else
        begin
            ;No number specified after -sp
            Console.WriteLine("Specify a number after the -sp option!")
            stop
        end
    end
    else
    begin
        ;No -sp option, no spare procedure slots in symbol vector
        spare_routines = 0
    end

    ;Are we being asked to support xfServerPlus debugging?
    debugSupport = (CommandLine("XD ",1,ClBuffer,ClCount))

    ;Should the link create a map file? (-m option)
    mapFile = CommandLine("M ")

    ;Should we link against the SQL Connection library? (-sql option)
    linksql = CommandLine("SQL ")

    ;Should we link against the UI Toolkit library? (-tk option)
    linktk = CommandLine("TK ")

    ;Are we in quiet mode? (-q option)
    quiet = CommandLine("Q ")

    ;Should we create a linker options file? (-o option)
    optionsFile = CommandLine("O ")

    ;Make sure we can open the library with the path provided
    try
    begin
        data lfs, a128
        data basename, a64
        open(pipe=0,i:s,libspec)
        xcall filnm(pipe,lfs)                   ;Get full expanded file spec
        xcall parse(lfs,,,,,basename)           ;Get base file name only
        libfullspec = %atrim(lfs)               ;Store full spec for later
        libname = %atrim(basename)              ;Store base name for later
        close pipe
    end
    catch (ex, @Exception)
    begin
        Console.WriteLine("Failed to open library " + libspec)
        Console.WriteLine(ex.Message)
        stop
    end
    endtry

    ;Get a listing of the contents of the object library
    firstrecord = true
    datasections = new ArrayList()
    routines = new ArrayList()

    open(pipe=0,i,"|LIBRARIAN/LIST/NAME "+libfullspec)

    repeat
    begin
        reads(pipe,buff,eof)

        if (firstrecord)
        begin
            ;If we get an error the most likely reason is that the
            ;file specified on the command line is not an object library
            if (buff=="%LIBRAR-F-OPENIN")
            begin
                Console.WriteLine("Not an object library!")
                close pipe
                stop
            end
        end

        ;Did we find a new module in the object library?
        if (buff=="Module ")
            call process_module
    end

eof,
    close pipe

    ;Did we find anything?
    if (routines.Count) then
        call write_comfile
    else
        Console.WriteLine('No routines in library!')

    stop

;-----------------------------------------------------------------------------
;Process a module in the object library
;
process_module,

    ;Extract the module name

    ;Process the module
    repeat
    begin
        reads(pipe,buff)
        if (!buff) then
            exitloop                            ;No data, we're done with this module
        else if (buff(1:2)=="$$") then
            datasections.Add((@a)%atrim(buff))  ;It's a global data section
        else if (buff(%trim(buff):1)=="$") then
            datasections.Add((@a)%atrim(buff))  ;It's a common
        else if (buff!="$SR_")
            routines.Add((@a)%atrim(buff))      ;It's not s static record, so it's a routine
    end

    return

;-----------------------------------------------------------------------------
;Create the DCL command procedure
;
write_comfile,

    imagespec = exelocation.Length ? exelocation : ""
    imagespec = imagespec + libname
    imagespec = exesuffix.Length ? imagespec + exesuffix : imagespec
    imagespec = imagespec + '.EXE'

    open(comfile=0,o,libname+".COM",OPTIONS:"/STREAM")

    if (optionsFile) then 
        open(optfile=0,o,libname+".OPT",OPTIONS:"/STREAM")
    else
        optfile = comfile
    
    ;Header section

    writes(comfile,'$ !============================================================================')
    writes(comfile,'$ !')
    writes(comfile,'$ ! Title:       '+libname+'.COM')
    writes(comfile,'$ !')
    writes(comfile,'$ ! Description: Links '+imagespec+' from '+libspec)
    writes(comfile,'$ !')
    writes(comfile,'$ !============================================================================')
    
    ;Make sure required logicals are present
    
    writes(comfile,'$ !')
    writes(comfile,'$ IF (F$TRNLNM("SYNRTL").EQS."")   THEN DEFINE/NOLOG SYNRTL   SYS$SHARE:SYNRTL.EXE')
    writes(comfile,'$ IF (F$TRNLNM("DBLTLIB").EQS."")  THEN DEFINE/NOLOG DBLTLIB  SYS$SHARE:DBLTLIB.OLB')
    if (linksql)
        writes(comfile,'$ IF (F$TRNLNM("SSQLRTL").EQS."")  THEN DEFINE/NOLOG SSQLRTL  CONNECTDIR:SSQLRTL.EXE')
    if (linktk)
        writes(comfile,'$ IF (F$TRNLNM("TKLIB_SH").EQS."") THEN DEFINE/NOLOG TKLIB_SH WND:TKLIB_SH.EXE')
    writes(comfile,'$ !')
    writes(comfile,'$ !----------------------------------------------------------------------------')
    writes(comfile,'$ !')

    ;Display what we're doing

    writes(comfile,'$ WRITE SYS$OUTPUT "Linking shared image '+imagespec+'"')
    writes(comfile,'$ !')

    ;Link command

    display(comfile,'$ LINK/SHARE='+imagespec)

    ;Map file?

    if (mapFile)
    begin
        display(comfile,'/MAP='+libname)
        if (exesuffix.Length)
            display(comfile,exesuffix)
        display(comfile,'.MAP')
    end

    ;Input items

    if (optionsFile) then
		writes(comfile," "+libname+'.OPT/OPTION')
    else
        writes(comfile,' SYS$INPUT/OPTION')

    writes(optfile,'!')
    writes(optfile,libspec+'/LIBRARY')

    if (debugSupport)
        writes(optfile,'DBLDIR:elb.obj')

    if (linksql)
        writes(optfile,'SSQLRTL/SHARE')

    if (linktk)
        writes(optfile,'TKLIB_SH/SHARE')

    writes(optfile,'SYNRTL/SHARE')
    writes(optfile,'DBLTLIB/LIBRARY')
    writes(optfile,'!')

    ;Collects and clusters

    writes(optfile,'CLUSTER = ' + libname + '_STATIC_RECORDS')
    writes(optfile,'COLLECT = ' + libname + '_STATIC_RECORDS, $DBL_STCREC')
    writes(optfile,'CLUSTER = ' + libname + '_LOCAL_DATA')
    writes(optfile,'COLLECT = ' + libname + '_LOCAL DATA,$DBL_DATA,$LOCAL,$DATA')
    writes(optfile,'CLUSTER = ' + libname + '_ADDRESS')
    writes(optfile,'COLLECT = ' + libname + '_ADDRESS,$DBL_DESCR,$DBL_FXDCTL,$EXT$,$LINK$')
    writes(optfile,'CLUSTER = ' + libname + '$$READONLY')
    writes(optfile,'COLLECT = ' + libname + '$$READONLY,$CODE$,$DBLTRNSF_CODE')
    writes(optfile,'CLUSTER = ' + libname + '$$CODE')
    writes(optfile,'COLLECT = ' + libname + '$$CODE,$DBG$,$DBL_ADDR,$DBL_CODE,$DBL_LINCTL,$DBL_LITERAL')
    writes(optfile,'!')

    if (datasections.Count)
    begin
        writes(optfile,'! Collect shared data')
        writes(optfile,'!')
        writes(optfile,'CLUSTER = ' + libname + '_SHARED_DATA')
        writes(optfile,'COLLECT = ' + libname + '_SHARED_DATA, -')
        for ix from 0 thru datasections.Count-1
        begin
            display(optfile,'   ' + (a)datasections[ix])
            if (ix<datasections.Count-1) then
                writes(optfile,",-")
            else
                writes(optfile,"")
        end
        writes(optfile,'!')
    end

    ;Symbol vector

    writes(optfile,'symbol_vector=(-')

    if (debugSupport)
    begin
        writes(optfile,'    !')
        writes(optfile,'    ! Debugging support')
        writes(optfile,'    !')
        writes(optfile,"    $ELB_DBG=data, -")
    end

    if (datasections.Count)
    begin
        writes(optfile,'    !')
        writes(optfile,'    ! Shared data')
        writes(optfile,'    !')

        for ix from 0 thru datasections.Count-1
            writes(optfile,'    ' + (a)datasections[ix] + ' = data,-')

        if (spare_data)
            for ix from 1 thru spare_data
                writes(optfile,'    SPARE,-')
    end

    writes(optfile,'    !')
    writes(optfile,'    ! Procedures')
    writes(optfile,'    !')

    for ix from 0 thru routines.Count-1
    begin
        display(optfile,'    '+(a)routines[ix]+' = proc')
        if (ix<routines.Count-1) then
            writes(optfile,',-')
        else
        begin
            if (spare_routines) then
                writes(optfile,',-')
            else
                writes(optfile,')')
        end
    end

    if (spare_routines)
    begin
        for ix from 1 thru spare_routines
        begin
            display(optfile,'    SPARE')
            if (ix<spare_routines) then
                writes(optfile,',-')
            else
                writes(optfile,')')
        end
    end

    ;All done

    writes(optfile,'$ !')
    writes(optfile,'$ EXIT')
    writes(optfile,'$ !')

    close comfile

    if (optionsFile)
        close optfile
    
    if (!quiet)
        Console.WriteLine("Created "+libname+".COM")

    if (!quiet && optionsFile)
        Console.WriteLine("Created "+libname+".OPT")

    return

;-----------------------------------------------------------------------------
;Report utility usage information
;
usage,
    Console.WriteLine("MAKESHARE")
    Console.WriteLine("")
    Console.WriteLine("  This utility must be executed via a global symbol:")
    Console.WriteLine("    $ MAKESHARE:==$DISK:[DIRECTORY]MAKESHARE.EXE")
    Console.WriteLine("")
    Console.WriteLine("  Usage:")
    Console.WriteLine("    $ MAKESHARE -l <library> [-e <location>] [-s <suffix>] [-q]")
    Console.WriteLine("                             [-m] [-sql] [-sd <n>] [-sp <n>]")
    Console.WriteLine("")
    Console.WriteLine("    -l <library>     The name of the object library to create a shared image")
    Console.WriteLine("                     from. Disk and directory names, and logical names may be")
    Console.WriteLine("                     used.")
    Console.WriteLine("")
    Console.WriteLine("    -e <location>    Specifies a location in which to create the shared image")
    Console.WriteLine("                     executable. Specify a directory or logical name including")
    Console.WriteLine("                     a colon.")
    Console.WriteLine("")
    Console.WriteLine("    -s <suffix>      Specifies a suffix for the shared image executable name")
    Console.WriteLine("")
    Console.WriteLine("    -xd              Add support for xfServerPlus debugging")
    Console.WriteLine("")
    Console.WriteLine("    -m               Generate a linker map file")
    Console.WriteLine("")
    Console.WriteLine("    -o               Generate a linker options file instead of inline options")    
    Console.WriteLine("")
    Console.WriteLine("    -sql             Link against the SQL Connection shared image")
    Console.WriteLine("")
    Console.WriteLine("    -tk              Link against the UI Toolkit shared image")
    Console.WriteLine("")
    Console.WriteLine("    -sd <n>          Include n spare symbol vector positions for data")
    Console.WriteLine("")
    Console.WriteLine("    -sp <n>          Include n spare symbol vector positions for procedures")
    Console.WriteLine("")
    Console.WriteLine("    -q               Quiet mode, don't display file created message")
    Console.WriteLine("")
    Console.WriteLine("  Examples:")
    Console.WriteLine("")
    Console.WriteLine("    $ makeshare -l MYLIB.OLB")
    Console.WriteLine("")
    Console.WriteLine("         Creates a command procedure named MYLIB.COM which can be used to link")
    Console.WriteLine("         a shared image named MYLIB.EXE. The object library must be in the")
    Console.WriteLine("         current directory, and the resulting command procedure and shared image")
    Console.WriteLine("         will also be created in the current directory. No linker map file will")
    Console.WriteLine("         be created, and there will be no spare slots in the symbol vector for")
    Console.WriteLine("         either data or procedures.")
    Console.WriteLine("")
    Console.WriteLine("    $ makeshare -l LIB:MYLIB.OLB -e EXE: -s _SH -sql -sd 10 -sp 100 -m")
    Console.WriteLine("")
    Console.WriteLine("         Creates a command procedure named MYLIB.COM which can be used to link")
    Console.WriteLine("         a shared image named EXE:MYLIB_SH.EXE. The object library will be")
    Console.WriteLine("         located in the directory referenced by the LIB: logical name. The")
    Console.WriteLine("         shared image will be created in the directory referenced by the EXE:")
    Console.WriteLine("         logical name, and its name will be suffixed with _SH. The resulting")
    Console.WriteLine("         shared image will be linked against the SQL Connection API shared image")
    Console.WriteLine("         and will have 10 spare slots in the symbol vector for additional data")
    Console.WriteLine("         items and 100 spare slots for additional procedures. A linker map file")
    Console.WriteLine("         named MYLIB_SH.MAP will be created in the current directory.")

    return

endmain

;=============================================================================
;Command-line parameter processing
;
function CommandLine, boolean

    required in  a_opt          ,a      ;Option string
    optional in  a_maxoptvals   ,n      ;Maximum argument to return
    optional out a_optvals      ,[*]a   ;Option arguments
    optional out a_numoptvals   ,n      ;Number of argument
    endparams

    .define MAXARGS 128

    record local_data
        fstatus         ,boolean, false ;Function return status
        maxopts         ,i4             ;Maximum number of options
        maxoptvals      ,i4             ;Maximum number of options requested
        numoptvals      ,i4             ;Number of options found
        ctr             ,i4             ;Counter
        length          ,i4             ;Length
        num_args        ,i4
        arg_pos         ,[MAXARGS] i4
        arg_len         ,[MAXARGS] i4
        command         ,a1024
        opt_char        ,a1
        option          ,a255
    endrecord

proc

    init local_data
	
    if (^passed(a_maxoptvals) && ^passed(a_optvals))
        maxoptvals = a_maxoptvals

    opt_char = %option(34) ? "/" : "-"

    xcall cmdln(command,maxopts,arg_pos,arg_len)

    upcase command

    for ctr from 1 thru maxopts
    begin
        if (arg_pos[ctr] && arg_len[ctr]) then
            option = command(arg_pos[ctr]:arg_len[ctr])
        else
            clear option

        ;Is this the requested option?
.ifdef OS_VMS
        ;On OpenVMS prior to V7.2, command lines were parsed as upper case.
        ;After 7.2 they can be optionally parsed case-preserved.  This is
        ;based on a process setting $SET PROCESS/PARSE_STYLE=TRADITIONAL|EXTENDED.
        ;CodeGen required TRADITIONAL command-line parsing to be used.
        if (option==opt_char+a_opt)
.else
        if (option==opt_char+a_opt)
.endc
            call process_argument
    end

    if (^passed(a_numoptvals))
        a_numoptvals = num_args

    freturn fstatus

process_argument,

        ;Found requested option
        fstatus = true

        ;Process next argument
        ctr += 1

        if (arg_pos[ctr]&&arg_len[ctr]) then
            option = command(arg_pos[ctr]:arg_len[ctr])
        else
            option = opt_char

        while(option!=opt_char)
        begin
            num_args+=1
            if (num_args<=maxoptvals)
            begin
                ;Strip leading and trailing quote characters
                using option select
                ("'", '"'),
                begin
                    length = trimz(option)
                    if ((length>1)&&(option(length:1)==option(1:1)))
                    begin
                        if (length>2) then
                            option = option(2, length-1)
                        else
                            clear option
                    end
                end
                endusing
                a_optvals[num_args] = option
            end

            ;Process next argument
            ctr+=1

            if (arg_pos[ctr]&&arg_len[ctr]) then
                option = command(arg_pos[ctr]:arg_len[ctr])
            else
                option = opt_char
          end

        ;Adjust counter to stay in correct position in loop
        ctr -= 1
        return

endfunction

;=============================================================================
;Return an uppercase version of a string
;
function UpperCase, string
    required in a_string, a
    stack record
        outstring, i4
    endrecord
proc
    outstring = %mem_proc(DM_ALLOC,^size(a_string))
    ^m(outstring) = a_string
    upcase ^m(outstring)
    freturn ^m(outstring)
endfunction
